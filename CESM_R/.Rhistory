return(func_df)
# number of runs added initialize
nrun <- 1
filename <- "~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256"
ID <- "100256"
func_df <- array(NA, dim = c(40,8,length(func_names)), dimnames=list(row_names, column_names, func_names))
if (length(subset(func_df, func_df[,1,]==ID[1])) > 0){
print("ERROR: ID used already!")
} else {
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
}
subset_prof_data <- subset(prof_tagged_df, prof_tagged_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
subset_prof_data <- subset(prof_not_df, prof_not_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
print("ERROR: No fitting ID in input data set from profiling.")
}
}
func_df[nrun,1,func] <- subset_prof_data$ID
func_df[nrun,2,func] <- subset_prof_data$Tagged
func_df[nrun,3,func] <- subset_prof_data$Cores
func_df[nrun,4,func] <- subset_prof_data$NDays
func_df[nrun,5,func] <- subset_prof_data$Dur_tot
# Continue to next run
nrun <- nrun + 1
}
func_df
subset_prof_data
subset_prof_data$ID
subset_prof_data$Tagged
func_df[nrun,2,func]
subset_prof_data$Tagged
func_df[nrun,1,func] <- subset_prof_data$ID
func_df[nrun,1,func]
func_df
func
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
}
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
subset_prof_data <- subset(prof_tagged_df, prof_tagged_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
subset_prof_data <- subset(prof_not_df, prof_not_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
print("ERROR: No fitting ID in input data set from profiling.")
}
}
func_df[nrun,1,func] <- subset_prof_data$ID
func_df[nrun,2,func] <- subset_prof_data$Tagged
func_df[nrun,3,func] <- subset_prof_data$Cores
func_df[nrun,4,func] <- subset_prof_data$NDays
func_df[nrun,5,func] <- subset_prof_data$Dur_tot
}
func_df
func_df[nrun,6,func]
as.numeric(subset_data$walltotal)
func_df
func_df <- as.numeric(array(NA, dim = c(40,8,length(func_names)), dimnames=list(row_names, column_names, func_names)))
if (length(subset(func_df, func_df[,1,]==ID[1])) > 0){
print("ERROR: ID used already!")
} else {
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
subset_prof_data <- subset(prof_tagged_df, prof_tagged_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
subset_prof_data <- subset(prof_not_df, prof_not_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
print("ERROR: No fitting ID in input data set from profiling.")
}
}
func_df[nrun,1,func] <- subset_prof_data$ID
func_df[nrun,2,func] <- subset_prof_data$Tagged
func_df[nrun,3,func] <- subset_prof_data$Cores
func_df[nrun,4,func] <- subset_prof_data$NDays
func_df[nrun,5,func] <- subset_prof_data$Dur_tot
}
# Continue to next run
nrun <- nrun + 1
}
func_df
func_df <- array(NA, dim = c(40,8,length(func_names)), dimnames=list(row_names, column_names, func_names))
if (length(subset(func_df, func_df[,1,]==ID[1])) > 0){
print("ERROR: ID used already!")
} else {
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
subset_prof_data <- subset(prof_tagged_df, prof_tagged_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
subset_prof_data <- subset(prof_not_df, prof_not_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
print("ERROR: No fitting ID in input data set from profiling.")
}
}
func_df[nrun,1,func] <- subset_prof_data$ID
func_df[nrun,2,func] <- subset_prof_data$Tagged
func_df[nrun,3,func] <- subset_prof_data$Cores
func_df[nrun,4,func] <- subset_prof_data$NDays
func_df[nrun,5,func] <- subset_prof_data$Dur_tot
}
# Continue to next run
nrun <- nrun + 1
}
func_df
as.numeric(func_df[,,])
as.numeric(subset(prof_tagged_df, prof_tagged_df$ID == ID[1]))
subset_prof_data <- as.numeric(subset(prof_tagged_df, prof_tagged_df$ID == ID[1],
select = c(ID, Tagged, Cores, NDays, Dur_tot)))
as.numeric(subset(prof_tagged_df, prof_tagged_df$ID == ID[1],
select = c(ID, Tagged, Cores, NDays, Dur_tot)))
subset_prof_data$ID
subset_prof_data[1]
subset_prof_data[2]
subset_prof_data[3]
source("./CESM_prof.R")
timing_data <- read.table("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256",
skip = 5, header=TRUE)
# get function names
func_names <- as.vector(timing_data$name)
rm(timing_data)
# Create data file
row_names=c(NULL)
column_names=c("ID", "tagged", "cores", "ndays", "tot_time_run", "walltotal", "wallmax", "wallmin")
func_df <- array(NA, dim = c(40,8,length(func_names)), dimnames=list(row_names, column_names, func_names))
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
# number of runs added initialize
nrun <- 1
#filename <- "~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256"
#ID <- "100256"
#### add_func_data ###--------------------------------------------------------------------------------------
# Add data from a run to the function list
# ID is the starting time.
add_func_data <- function(filename, ID){
if (length(subset(func_df, func_df[,1,]==ID[1])) > 0){
print("ERROR: ID used already!")
} else {
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
subset_prof_data <- as.numeric(subset(prof_tagged_df, prof_tagged_df$ID == ID[1],
select = c(ID, Tagged, Cores, NDays, Dur_tot)))
if (length(subset_prof_data$ID) == 0 ){
subset_prof_data <- subset(prof_not_df, prof_not_df$ID == ID[1])
if (length(subset_prof_data$ID) == 0 ){
print("ERROR: No fitting ID in input data set from profiling.")
}
}
func_df[nrun,1,func] <- subset_prof_data[1]
func_df[nrun,2,func] <- subset_prof_data[2]
func_df[nrun,3,func] <- subset_prof_data[3]
func_df[nrun,4,func] <- subset_prof_data[4]
func_df[nrun,5,func] <- subset_prof_data[5]
}
# Continue to next run
nrun <- nrun + 1
}
return(func_df)
}
add_func_data("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256", "100256")
#filename <- "~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256"
#ID <- "100256"
#### add_func_data ###--------------------------------------------------------------------------------------
# Add data from a run to the function list
# ID is the starting time.
add_func_data <- function(filename, ID){
if (length(subset(func_df, func_df[,1,]==ID[1])) > 0){
print("ERROR: ID used already!")
} else {
timing_data <- read.table(filename, skip = 5, header=TRUE)
for (func in 1:length(timing_data$name)){
subset_data <- subset(timing_data, timing_data$name==func_names[func])
func_df[nrun,6,func] <- as.numeric(subset_data$walltotal)
func_df[nrun,7,func] <- subset_data$wallmax
func_df[nrun,8,func] <- subset_data$wallmin
subset_prof_data <- as.numeric(subset(prof_tagged_df, prof_tagged_df$ID == ID[1],
select = c(ID, Tagged, Cores, NDays, Dur_tot)))
if (length(subset_prof_data) == 0 ){
subset_prof_data <- subset(prof_not_df, prof_not_df$ID == ID[1],
select = c(ID, Tagged, Cores, NDays, Dur_tot))
if (length(subset_prof_data) == 0 ){
print("ERROR: No fitting ID in input data set from profiling.")
}
}
func_df[nrun,1,func] <- subset_prof_data[1]
func_df[nrun,2,func] <- subset_prof_data[2]
func_df[nrun,3,func] <- subset_prof_data[3]
func_df[nrun,4,func] <- subset_prof_data[4]
func_df[nrun,5,func] <- subset_prof_data[5]
}
# Continue to next run
nrun <- nrun + 1
}
return(func_df)
}
add_func_data("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256", "100256")
source("./CESM_prof.R")
source("./plot_functions.R")
# get data and save in data frames
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
ndays5_tag <- subset(prof_tagged_df, NDays == 5 )
ndays10_tag <- subset(prof_tagged_df, NDays == 10)
ndays5_notag <- subset(prof_not_df, NDays == 5 )
ndays10_notag <- subset(prof_not_df, NDays == 10)
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, TRUE, "Total Duration", TRUE, "5vs10_dur_tot_tagged")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, TRUE, "Initialization Duration",  TRUE, "5vs10_dur_init_tagged")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",  TRUE, "5vs10_dur_run_tagged")
# Fin duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, TRUE, "Finish Duration",  TRUE, "5vs10_dur_fin_tagged")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot(ndays5_notag$Cores, ndays5_notag$Throughput)
plot(ndays5_notag$Cores, ndays5_notag$Cost)
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", FALSE, "5vs10_dur_tot_both")
source("./CESM_prof.R")
source("./plot_functions.R")
# get data and save in data frames
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
ndays5_tag <- subset(prof_tagged_df, NDays == 5 )
ndays10_tag <- subset(prof_tagged_df, NDays == 10)
ndays5_notag <- subset(prof_not_df, NDays == 5 )
ndays10_notag <- subset(prof_not_df, NDays == 10)
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, TRUE, "Total Duration", TRUE, "5vs10_dur_tot_tagged")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, TRUE, "Initialization Duration",  TRUE, "5vs10_dur_init_tagged")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",  TRUE, "5vs10_dur_run_tagged")
# Fin duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, TRUE, "Finish Duration",  TRUE, "5vs10_dur_fin_tagged")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot(ndays5_notag$Cores, ndays5_notag$Throughput)
plot(ndays5_notag$Cores, ndays5_notag$Cost)
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", FALSE, "5vs10_dur_tot_both")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
View(prof_not_df)
View(prof_tagged_df)
source("./CESM_prof.R")
source("./plot_functions.R")
# get data and save in data frames
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
ndays5_tag <- subset(prof_tagged_df, NDays == 5 )
ndays10_tag <- subset(prof_tagged_df, NDays == 10)
ndays5_notag <- subset(prof_not_df, NDays == 5 )
ndays10_notag <- subset(prof_not_df, NDays == 10)
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, TRUE, "Initialization Duration",  TRUE, "5vs10_dur_init_tagged")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",  TRUE, "5vs10_dur_run_tagged")
# Fin duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, TRUE, "Finish Duration",  TRUE, "5vs10_dur_fin_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, TRUE, "Initialization Duration",  FALSE, "5vs10_dur_init_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, TRUE, "Initialization Duration",  FALSE, "5vs10_dur_init_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
source("./plot_functions.R")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tagged")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=TRUE, "5vs10_dur_tot_tagged")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, TRUE, "Initialization Duration",  TRUE, "5vs10_dur_init_tagged")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",  TRUE, "5vs10_dur_run_tagged")
# Fin duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, TRUE, "Finish Duration",  TRUE, "5vs10_dur_fin_tagged")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=TRUE, "5vs10_dur_tot_not")
# Init duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, TRUE, "Initialization Duration",  TRUE, "5vs10_dur_init_not")
# Run duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, TRUE, "Run Duration",  TRUE, "5vs10_dur_run_not")
# Fin duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, TRUE, "Finish Duration",  TRUE, "5vs10_dur_fin_not")
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", FALSE, "5vs10_dur_tot_both")
source("./plot_functions.R")
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", FALSE, "5vs10_dur_tot_both")
source("./plot_functions.R")
source("./plot_functions.R")
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", FALSE, "5vs10_dur_tot_both")
source("./plot_functions.R")
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", FALSE, "5vs10_dur_tot_both")
# Init duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, "Initialization Duration", FALSE, "5vs10_dur_init_both")
# Run duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, "Run Duration", FALSE, "5vs10_dur_run_both")
# Fin duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, "Finish Duration", FALSE, "5vs10_dur_fin_both")
### Plots both ####--------------------------------------------------------------
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", TRUE, "5vs10_dur_tot_both")
# Init duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, "Initialization Duration", TRUE, "5vs10_dur_init_both")
# Run duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, "Run Duration", TRUE, "5vs10_dur_run_both")
# Fin duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, "Finish Duration", TRUE, "5vs10_dur_fin_both")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, isTagged=FALSE, "Total Duration", isSaved=TRUE, "5vs10_dur_tot_not")
# Init duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, FALSE, "Initialization Duration", TRUE, "5vs10_dur_init_not")
# Run duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, FALSE, "Run Duration",  TRUE, "5vs10_dur_run_not")
# Fin duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, FALSE, "Finish Duration", TRUE, "5vs10_dur_fin_not")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Throughput, ndays10_notag$Cores,
ndays10_notag$Troughput, TRUE, "Throughput", FALSE, "5vs10_troughput_not")
ndays10_notag$Troughput
ndays10_notag
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Throughput, ndays10_notag$Cores,
ndays10_notag$Throughput, TRUE, "Throughput", FALSE, "5vs10_troughput_not")
source("./plot_functions.R")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_notag$Cores, ndays5_notag$Throughput, ndays10_notag$Cores,
ndays10_notag$Throughput, ytext="Simulated_years / day ", TRUE, "Throughput", FALSE, "5vs10_troughput_not")
plot_5vs10_flex(ndays5_notag$Cores, ndays5_notag$Cost, ndays10_notag$Cores,
ndays10_notag$Cost, ytext="pe-hrs/simulated_years", TRUE, "Cost", FALSE, "5vs10_cost_not")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_notag$Cores, ndays5_notag$Throughput, ndays10_notag$Cores,
ndays10_notag$Throughput, ytext="Simulated_years / day ", FALSE, "Throughput", FALSE, "5vs10_troughput_not")
plot_5vs10_flex(ndays5_notag$Cores, ndays5_notag$Cost, ndays10_notag$Cores,
ndays10_notag$Cost, ytext="pe-hrs/simulated_years", FALSE, "Cost", FALSE, "5vs10_cost_not")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_notag$Cores, ndays5_notag$Throughput, ndays10_notag$Cores,
ndays10_notag$Throughput, ytext="Simulated_years / day ", FALSE, "Throughput", TRUE, "5vs10_troughput_not")
plot_5vs10_flex(ndays5_notag$Cores, ndays5_notag$Cost, ndays10_notag$Cores,
ndays10_notag$Cost, ytext="pe-hrs/simulated_years", FALSE, "Cost", TRUE, "5vs10_cost_not")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Throughput, ndays10_tag$Cores,
ndays10_tag$Throughput, ytext="Simulated_years / day ", TRUE, "Throughput", FALSE, "5vs10_troughput_tagged")
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Cost, ndays10_tag$Cores,
ndays10_tag$Cost, ytext="pe-hrs/simulated_years", TRUE, "Cost", FALSE, "5vs10_cost_tagged")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Throughput, ndays10_tag$Cores,
ndays10_tag$Throughput, ytext="Simulated_years / day ", TRUE, "Throughput", FALSE, "5vs10_troughput_tagged")
### Throughput ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Throughput, ndays10_tag$Cores,
ndays10_tag$Throughput, ytext="Simulated_years / day ", isTagged=TRUE, "Throughput", TRUE, "5vs10_troughput_tagged")
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Cost, ndays10_tag$Cores,
ndays10_tag$Cost, ytext="pe-hrs/simulated_years", isTagged=TRUE, "Cost", TRUE, "5vs10_cost_tagged")
# Cost
# The cost is expected to increase if using more cores for CESM
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Cost, ndays10_tag$Cores,
ndays10_tag$Cost, ytext="pe-hrs/simulated_years", isTagged=TRUE, "Cost", FALSE, "5vs10_cost_tagged")
