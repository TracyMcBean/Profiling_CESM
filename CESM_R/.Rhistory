# Check out the situtation of the average values and their spread.
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
wallclock_per_tag
mean(wallclock_per_not)
i <- 1
# Check out the situtation of the average values and their spread.
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
round(mean(wallclock_per_not))
mean(wallclock_per_not)
wallclock_per_not
func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]
func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]
wallclock_per_tag
round(mean(wallclock_per_not), digitst=3)
round(mean(wallclock_per_not), digits=3)
mean(wallclock_per_not), digits=3
round(mean(wallclock_per_tag), digits=3)
# Visualize profiling data
rm(list=ls())
source("./CESM_prof.R")
source("./plot_functions.R")
# get data and save in data frames
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
ndays5_tag <- subset(prof_tagged_df, NDays == 5 )
ndays10_tag <- subset(prof_tagged_df, NDays == 10)
ndays5_notag <- subset(prof_not_df, NDays == 5 )
ndays10_notag <- subset(prof_not_df, NDays == 10)
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, isTagged=FALSE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_not")
# Init duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, FALSE, "Initialization Duration", FALSE, "5vs10_dur_init_not")
# Run duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, FALSE, "Run Duration",  FALSE, "5vs10_dur_run_not")
# Fin duration
plot_5vs10_single(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, FALSE, "Finish Duration", FALSE, "5vs10_dur_fin_not")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=FALSE, "5vs10_dur_tot_tag")
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=TRUE, "5vs10_dur_tot_tag")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init,TRUE, "Initialization Duration", FALSE, "5vs10_dur_init_tag")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",  FALSE, "5vs10_dur_run_tag")
# Visualize profiling data
rm(list=ls())
source("./CESM_prof.R")
source("./plot_functions.R")
# get data and save in data frames
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
ndays5_tag <- subset(prof_tagged_df, NDays == 5 )
ndays10_tag <- subset(prof_tagged_df, NDays == 10)
ndays5_notag <- subset(prof_not_df, NDays == 5 )
ndays10_notag <- subset(prof_not_df, NDays == 10)
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=TRUE, "5vs10_dur_tot_tag")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init,TRUE, "Initialization Duration", FALSE, "5vs10_dur_init_tag")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",  FALSE, "5vs10_dur_run_tag")
# Fin duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, TRUE, "Finish Duration", FALSE, "5vs10_dur_fin_tag")
# Init duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init,TRUE, "Initialization Duration", TRUE, "5vs10_dur_init_tag")
# Run duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, TRUE, "Run Duration",   TRUE, "5vs10_dur_run_tag")
# Fin duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, TRUE, "Finish Duration",  TRUE, "5vs10_dur_fin_tag")
### Throughput and Cost ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Throughput, ndays10_tag$Cores,
ndays10_tag$Throughput, ytext="Simulated_years / day ", isTagged=TRUE, "Throughput", FALSE, "5vs10_troughput_tagged")
# Cost
# The cost is expected to increase if using more cores for CESM
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Cost, ndays10_tag$Cores,
ndays10_tag$Cost, ytext="pe-hrs/simulated_years", isTagged=TRUE, "Cost", FALSE, "5vs10_cost_tagged")
### Throughput and Cost ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Throughput, ndays10_tag$Cores,
ndays10_tag$Throughput, ytext="Simulated_years / day ", isTagged=TRUE, "Throughput",  TRUE, "5vs10_troughput_tagged")
# Cost
# The cost is expected to increase if using more cores for CESM
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Cost, ndays10_tag$Cores,
ndays10_tag$Cost, ytext="pe-hrs/simulated_years", isTagged=TRUE, "Cost",  TRUE, "5vs10_cost_tagged")
#### PLOTS ####-------------------------------------------------------------------------
saveVar <- TRUE
### Throughput and Cost ###--------------------------------------------------------------
# See page 43 of CESM user guide 1.2 for explanation
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Throughput, ndays10_tag$Cores,
ndays10_tag$Throughput, ytext="Simulated_years / day ", isTagged=TRUE, "Throughput", saveVar, "5vs10_troughput_tagged")
# Cost
# The cost is expected to increase if using more cores for CESM
plot_5vs10_flex(ndays5_tag$Cores, ndays5_tag$Cost, ndays10_tag$Cores,
ndays10_tag$Cost, ytext="pe-hrs/simulated_years", isTagged=TRUE, "Cost",  saveVar, "5vs10_cost_tagged")
#### PLOTS ####-------------------------------------------------------------------------
saveVar <- FALSE
# Set isTagged to TRUE for tagged title
# Total duration
plot_5vs10_single(ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, isTagged=TRUE, "Total Duration", isSaved=saveVar, "5vs10_dur_tot_tag")
### Plots both ####--------------------------------------------------------------
saveVar <- FALSE
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", saveVar, "5vs10_dur_tot_both")
# Init duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, "Initialization Duration",  saveVar, "5vs10_dur_init_both")
# Run duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, "Run Duration",  saveVar, "5vs10_dur_run_both")
# Fin duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, "Finish Duration",  saveVar, "5vs10_dur_fin_both")
# Run duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, "Run Duration",  saveVar, "5vs10_dur_run_both")
# Fin duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, "Finish Duration",  saveVar, "5vs10_dur_fin_both")
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", saveVar, "5vs10_dur_tot_both")
### Plots both ####--------------------------------------------------------------
saveVar <- TRUE
# Total duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_tot, ndays10_notag$Cores,
ndays10_notag$Dur_tot, ndays5_tag$Cores, ndays5_tag$Dur_tot, ndays10_tag$Cores,
ndays10_tag$Dur_tot, "Total Duration", saveVar, "5vs10_dur_tot_both")
# Init duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_init, ndays10_notag$Cores,
ndays10_notag$Dur_init, ndays5_tag$Cores, ndays5_tag$Dur_init, ndays10_tag$Cores,
ndays10_tag$Dur_init, "Initialization Duration",  saveVar, "5vs10_dur_init_both")
# Run duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_run, ndays10_notag$Cores,
ndays10_notag$Dur_run, ndays5_tag$Cores, ndays5_tag$Dur_run, ndays10_tag$Cores,
ndays10_tag$Dur_run, "Run Duration",  saveVar, "5vs10_dur_run_both")
# Fin duration
plot_5vs10_all(ndays5_notag$Cores, ndays5_notag$Dur_fin, ndays10_notag$Cores,
ndays10_notag$Dur_fin, ndays5_tag$Cores, ndays5_tag$Dur_fin, ndays10_tag$Cores,
ndays10_tag$Dur_fin, "Finish Duration",  saveVar, "5vs10_dur_fin_both")
### Plots both ####--------------------------------------------------------------
saveVar <- FALSE
source("./CESM_prof.R")
# Get data
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
timing_data <- read.table("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256",
skip = 5, header=TRUE)
# get function names
func_names <- as.vector(timing_data$name)
rm(timing_data)
# Create data file
row_names=c(NULL)
column_names=c("ID", "tagged", "cores", "ndays", "tot_time_run", "walltotal", "wallmax", "wallmin")
func_df <- array(NA, dim = c(40,8,length(func_names)), dimnames=list(row_names, column_names, func_names))
# number of runs added initialize
nrun <- 1
# Some runs from 1 missing. Ending at 190521-114744
dateID <- c(190515, 190515, 190515, 190516, 190516, 190517, 190518, 190519, 190519, 190519, 190519, 190519, 190520,
190520, 190520, 190521, 190521, 190521, 190521, 190522, 190522, 190523,
190515, 190515, 190516, 190516, 190516, 190517, 190517, 190518, 190518, 190519, 190519, 190520, 190520,
190520, 190520, 190520, 190520, 190520, 190520)
# numbers starting with zeros lose zeros if not saved as character explicitly
timeID <- c(100256, 112230, 160758, "095004", 123658, 113255, 115631, "094444", 103838, 111813, 204830, 214334, 113921,
140026, 181204, "094851", 114744, 134459, 144738, 083656, 174343, "091805",
101006, 105339, "093632", 113246, 120848, 112213, 115727, 155302, 164356, 202752, 225842, 100705, 105507,
112847, 115041, 135839, 143315, 150757, 161950)
for (i in 1:length(dateID)){
list_data <- add_func_data(paste("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.",dateID[i], "-", as.character(timeID[i]), sep=""),
as.character(timeID[i]))
func_df <- list_data[[1]]
nrun <- list_data[[2]]
}
for (i in 1:length(dateID)){
list_data <- add_func_data(paste("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.",dateID[i], "-", as.character(timeID[i]), sep=""),
as.character(timeID[i]))
func_df <- list_data[[1]]
nrun <- list_data[[2]]
}
source("./CESM_prof.R")
# Get data
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
timing_data <- read.table("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256",
skip = 5, header=TRUE)
# get function names
func_names <- as.vector(timing_data$name)
# get function names
func_names <- as.vector(timing_data$name)
rm(timing_data)
# Create data file
row_names=c(NULL)
column_names=c("ID", "tagged", "cores", "ndays", "tot_time_run", "walltotal", "wallmax", "wallmin")
func_df <- array(NA, dim = c(40,8,length(func_names)), dimnames=list(row_names, column_names, func_names))
# number of runs added initialize
nrun <- 1
# Some runs from 1 missing. Ending at 190521-114744
dateID <- c(190515, 190515, 190515, 190516, 190516, 190517, 190518, 190519, 190519, 190519, 190519, 190519, 190520,
190520, 190520, 190521, 190521, 190521, 190521, 190522, 190522, 190523,
190515, 190515, 190516, 190516, 190516, 190517, 190517, 190518, 190518, 190519, 190519, 190520, 190520,
190520, 190520, 190520, 190520, 190520, 190520)
# numbers starting with zeros lose zeros if not saved as character explicitly
timeID <- c(100256, 112230, 160758, "095004", 123658, 113255, 115631, "094444", 103838, 111813, 204830, 214334, 113921,
140026, 181204, "094851", 114744, 134459, 144738, "083656", 174343, "091805",
101006, 105339, "093632", 113246, 120848, 112213, 115727, 155302, 164356, 202752, 225842, 100705, 105507,
112847, 115041, 135839, 143315, 150757, 161950)
# numbers starting with zeros lose zeros if not saved as character explicitly
timeID <- c(100256, 112230, 160758, "095004", 123658, 113255, 115631, "094444", 103838, 111813, 204830, 214334, 113921,
140026, 181204, "094851", 114744, 134459, 144738, "083656", 174343, "091805",
101006, 105339, "093632", 113246, 120848, 112213, 115727, 155302, 164356, 202752, 225842, 100705, 105507,
112847, 115041, 135839, 143315, 150757, 161950)
for (i in 1:length(dateID)){
list_data <- add_func_data(paste("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.",dateID[i], "-", as.character(timeID[i]), sep=""),
as.character(timeID[i]))
func_df <- list_data[[1]]
nrun <- list_data[[2]]
}
# wallmax as percentage of total run (tot_time_run)
for (i in 1:length(func_df[1,1,])){
# y and x axis data
cores_tag <- func_df[which(func_df[,4,i]==10 & func_df[,2,1]==1),3,i]
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
cores_not <- func_df[which(func_df[,4,i]==10 & func_df[,2,1]==0),3,i]
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
# y limits
ymin <- min(wallclock_per_not, wallclock_per_tag,na.rm = TRUE)
ymax <- max(wallclock_per_not, wallclock_per_tag,na.rm = TRUE)
# plot
#png(paste("~/Documents/IASS/Profiling_CESM/CESM_R/Plots/", names(func_df[1,1,])[i], "_10days", sep=""))
plot(cores_tag, wallclock_per_tag, ylim=c(ymin, ymax),
ylab = "% of total", xlab="Cores", main = paste("Wallclock time", names(func_df[1,1,])[i], "(10 day run)"), pch=15, col="red" )
points(cores_not, wallclock_per_not, col = "darkgreen", pch = 16)
legend("topleft", legend=c("tagged", "no tags"), col=c("red", "darkgreen"), pch = c(15,16), bty="n")
#dev.off()
}
i <- 1
# Check out the situtation of the average values and their spread.
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
source("./CESM_prof.R")
# Get data
prof_data <- get_data()
prof_tagged_df <- prof_data[[2]]
prof_not_df <- prof_data[[1]]
timing_data <- read.table("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.190515-100256",
skip = 5, header=TRUE)
# get function names
func_names <- as.vector(timing_data$name)
rm(timing_data)
# Create data file
row_names=c(NULL)
column_names=c("ID", "tagged", "cores", "ndays", "tot_time_run", "walltotal", "wallmax", "wallmin")
func_df <- array(NA, dim = c(42,8,length(func_names)), dimnames=list(row_names, column_names, func_names))
# number of runs added initialize
nrun <- 1
# Some runs from 1 missing. Ending at 190521-114744
dateID <- c(190515, 190515, 190515, 190516, 190516, 190517, 190518, 190519, 190519, 190519, 190519, 190519, 190520,
190520, 190520, 190521, 190521, 190521, 190521, 190522, 190522, 190523,
190515, 190515, 190516, 190516, 190516, 190517, 190517, 190518, 190518, 190519, 190519, 190520, 190520,
190520, 190520, 190520, 190520, 190520, 190520)
# numbers starting with zeros lose zeros if not saved as character explicitly
timeID <- c(100256, 112230, 160758, "095004", 123658, 113255, 115631, "094444", 103838, 111813, 204830, 214334, 113921,
140026, 181204, "094851", 114744, 134459, 144738, "083656", 174343, "091805",
101006, 105339, "093632", 113246, 120848, 112213, 115727, 155302, 164356, 202752, 225842, 100705, 105507,
112847, 115041, 135839, 143315, 150757, 161950)
for (i in 1:length(dateID)){
list_data <- add_func_data(paste("~/Documents/IASS/Profiling_CESM/Timing_data/ccsm_timing_stats.",dateID[i], "-", as.character(timeID[i]), sep=""),
as.character(timeID[i]))
func_df <- list_data[[1]]
nrun <- list_data[[2]]
}
# wallmax as percentage of total run (tot_time_run)
for (i in 1:length(func_df[1,1,])){
# y and x axis data
cores_tag <- func_df[which(func_df[,4,i]==10 & func_df[,2,1]==1),3,i]
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
cores_not <- func_df[which(func_df[,4,i]==10 & func_df[,2,1]==0),3,i]
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
# y limits
ymin <- min(wallclock_per_not, wallclock_per_tag,na.rm = TRUE)
ymax <- max(wallclock_per_not, wallclock_per_tag,na.rm = TRUE)
# plot
#png(paste("~/Documents/IASS/Profiling_CESM/CESM_R/Plots/", names(func_df[1,1,])[i], "_10days", sep=""))
plot(cores_tag, wallclock_per_tag, ylim=c(ymin, ymax),
ylab = "% of total", xlab="Cores", main = paste("Wallclock time", names(func_df[1,1,])[i], "(10 day run)"), pch=15, col="red" )
points(cores_not, wallclock_per_not, col = "darkgreen", pch = 16)
legend("topleft", legend=c("tagged", "no tags"), col=c("red", "darkgreen"), pch = c(15,16), bty="n")
#dev.off()
}
# wallmax as percentage of total run (tot_time_run)
for (i in 1:length(func_df[1,1,])){
# y and x axis data
cores_tag <- func_df[which(func_df[,4,i]==10 & func_df[,2,1]==1),3,i]
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
cores_not <- func_df[which(func_df[,4,i]==10 & func_df[,2,1]==0),3,i]
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
# y limits
ymin <- min(wallclock_per_not, wallclock_per_tag,na.rm = TRUE)
ymax <- max(wallclock_per_not, wallclock_per_tag,na.rm = TRUE)
# plot
png(paste("~/Documents/IASS/Profiling_CESM/CESM_R/Plots/", names(func_df[1,1,])[i], "_10days", sep=""))
plot(cores_tag, wallclock_per_tag, ylim=c(ymin, ymax),
ylab = "% of total", xlab="Cores", main = paste("Wallclock time", names(func_df[1,1,])[i], "(10 day run)"), pch=15, col="red" )
points(cores_not, wallclock_per_not, col = "darkgreen", pch = 16)
legend("topleft", legend=c("tagged", "no tags"), col=c("red", "darkgreen"), pch = c(15,16), bty="n")
dev.off()
}
func_df
# Check out the situtation of the average values and their spread.
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
round(mean(wallclock_per_tag), digits=3)
i <- 1
# Check out the situtation of the average values and their spread.
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
round(mean(wallclock_per_tag), digits=3)
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
round(mean(wallclock_per_not), digits=3)
wc_means <- round(mean(wallclock_per_not), digits=5)
# Check out the situtation of the average values and their spread.
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
wc_means[1] <- round(mean(wallclock_per_tag), digits=5)
wc_means[2] <- round(mean(wallclock_per_not), digits=5)
diff(wc_means)
round(mean(wallclock_per_tag), digits=5)
round(mean(wallclock_per_not), digits=5)
wc_means
wc_means <- array(NA, dim = (length(func_names),2))
wc_means <- array(NA, dim = c(length(func_names),2))
wc_means
wc_means <- array(NA, dim = c(length(func_names),2))
wc_diff <- array(NA, dim = length(func_names))
wc_means <- array(NA, dim = c(length(func_names),2))
wc_diff <- array(NA, dim = length(func_names))
# Check out the situtation of the average values and their spread.
for (i in 1:length(func_names)){
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
wc_means[i,1] <- round(mean(wallclock_per_tag), digits=5)
wc_means[i,2] <- round(mean(wallclock_per_not), digits=5)
wc_diff[i] <- diff(wc_means[i,])
}
wc_diff
wc_means <- array(NA, dim = c(length(func_names),2))
wc_diff <- array(NA, dim = length(func_names))
# Check out the situtation of the average values and their spread.
for (i in 1:length(func_names)){
wallclock_per_tag <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==1),5,i]) *100
wallclock_per_not <- (func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),7,i]/ func_df[which(func_df[,4,i]==10 & func_df[,2,i]==0),5,i]) *100
wc_means[i,1] <- round(mean(wallclock_per_tag, na.rm = TRUE), digits=5)
wc_means[i,2] <- round(mean(wallclock_per_not, na.rm=TRUE), digits=5)
wc_diff[i] <- diff(wc_means[i,])
}
wc_diff
which(wc_diff > 1)
func_names[which(wc_diff > 1)]
plot(wc_diff[which(wc_diff > 1)])
func_names[which(wc_diff > 5)]
func_names[which(wc_diff > 5 || wc_diff < -5)]
which(wc_diff > 5 || wc_diff < -5)
func_names[which(wc_diff > 5 | wc_diff < -5)]
plot(wc_diff[which(wc_diff > 5 | wc_diff < -5)])
plot(wc_diff[which(wc_diff > 5 | wc_diff < -5)],
xaxt="n")
abline(h=0)
abline(h=0, col = "grey", lty="dotted")
plot(wc_diff[which(wc_diff > 5 | wc_diff < -5)],
xaxt="n")
abline(h=0, col = "grey", lty="dotted")
abline(h=0, col = "darkgrey", lty="dotted")
axis(1, func_names[which(wc_diff > 5 | wc_diff < -5)])
axis(1, labels=func_names[which(wc_diff > 5 | wc_diff < -5)])
axis(1, at=c(1:length(func_names[which(wc_diff > 5 | wc_diff < -5)])) labels=func_names[which(wc_diff > 5 | wc_diff < -5)])
axis(1, at=c(1:length(func_names[which(wc_diff > 5 | wc_diff < -5)])), labels=func_names[which(wc_diff > 5 | wc_diff < -5)])
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)]), horiz=TRUE)
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE)
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c("red", "green"))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c("blue", "green"))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",9), rep("green", 6))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",9), rep("green", 6)) )
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",9), rep("green", 6)) )
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 1, text = func_names[which(wc_diff > 5 | wc_diff < -5)])
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)])
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1)
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=wc_diff[which(wc_diff > 5 | wc_diff < -5)])
wc_diff[which(wc_diff > 5 | wc_diff < -5)]
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=1)
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=c(1:15)
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=c(1:15))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=c(1:15))
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=c(1.5:15))
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(1:20, 1.5))
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(1,20, 1.5))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(1,20, 1.5))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(1,20, 1.5))
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(1,20, 1.3))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(1,20, 1.3))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(0,20, 1.3))
barplot(wc_diff[which(wc_diff > 5 | wc_diff < -5)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)) )
mtext(side = 2, text = func_names[which(wc_diff > 5 | wc_diff < -5)], las=1, at=seq(0.7,20, 1.25))
wc_diff[which(wc_diff > 5 | wc_diff < -5)]
which(wc_diff > 5 | wc_diff < -5)]
which(wc_diff > 5 | wc_diff < -5)
wc_diff
barplot(wc_diff[which(wc_diff > 1 | wc_diff < -1)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)),
main = "Difference of mean time spent in a specific process")
mtext(side = 2, text = func_names[which(wc_diff > 1 | wc_diff < -1)], las=1, at=seq(0.7,20, 1.25))
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c(rep("blue",6), rep("green", 9)),
main = "Difference of mean time spent in a specific process")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,20, 1.25))
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c(rep("blue",7), rep("green", 13)),
main = "Difference of mean time spent in a specific process")
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("blue", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process")
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,20, 1.25))
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,23, 1.25))
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1))
par(mar=c(5,6,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1))
par(mar=c(5,8,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process", xlab = "Difference in percent")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1))
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process", xlab = "Difference in percent")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1))
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1), cex=0.7)
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process", xlab = "Difference in percent")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1), cex=0.7)
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Difference of mean time spent in a specific process", xlab = "Difference in percent")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1), cex=0.8)
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Timer difference", sub = "Wallclock time of timer taken in percent of total wallclock time of run", xlab = "Difference Tagged - No tag in %")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1), cex=0.8)
wc_means
wc_diff
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1.1), cex=0.8)
# If the difference is positive then the non tagged version took longer for that timer.
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Timer difference", sub = "Wallclock time of timer taken in percent of total wallclock time of run", xlab = "Difference Tagged - No tag in %")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1.1), cex=0.8)
# If the difference is positive then the non tagged version took longer for that timer.
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Timer difference", sub = "Wallclock time of timer taken in percent of total wallclock time of run", xlab = "Difference Tagged - No tag in %")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,24, 1.2), cex=0.8)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Timer difference", sub = "Wallclock time of timer taken in percent of total wallclock time of run", xlab = "Difference Tagged - No tag in %")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,23, 1.2), cex=0.8)
# If the difference is positive then the non tagged version took longer for that timer.
par(mar=c(5,9,4,2)+0.1)
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Timer difference", sub = "Wallclock time of timer taken in percent of total wallclock time of run", xlab = "Difference Tagged - No tag in %")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,23, 1.21), cex=0.8)
abline(h=1)
abline(h=seq(0.7,23, 1.21), col="grey", lty="dotted")
barplot(wc_diff[which(wc_diff > 3 | wc_diff < -3)], horiz=TRUE, col = c("green", rep("blue",6), rep("green", 13)),
main = "Timer difference", sub = "Wallclock time of timer taken in percent of total wallclock time of run", xlab = "Difference Tagged - No tag in %")
mtext(side = 2, text = func_names[which(wc_diff > 3 | wc_diff < -3)], las=1, at=seq(0.7,23, 1.21), cex=0.8)
abline(h=seq(0,23, 1.21), col="grey", lty="dotted")
